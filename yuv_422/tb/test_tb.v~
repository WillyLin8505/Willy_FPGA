// ------------------------------------------------------------------------------//
// (C) Copyright. 2021
// SILICON OPTRONICS CORPORATION ALL RIGHTS RESERVED
//
// This design is confidential and proprietary owned by Silicon Optronics Corp.
// Any distribution and modification must be authorized by a licensing agreement
// ------------------------------------------------------------------------------//
// Filename        : test_tb.v
// Author          : Willylin
// Version         : $Revision$
// Last Modified On: 2021/9/16
// Last Modified By: $Author$
//
// Description     :test the i2c master 
// ------------------------------------------------------------------------------//

// defination & include
`timescale 1ns/1ns  

module test_tb();

parameter FIFO_DWID  = 32;
parameter FIFO_DEPTH = 4;
//================================================================================
//  signal declaration
//================================================================================
wire                  fifo_nfull;                              // FIFO near full @wclk doman
wire                  fifo_full;                               // FIFO full @wclk doman
wire                  fifo_nempty;                             // FIFO near empty @rclk doman
wire                  fifo_empty;                              // FIFO empty @rclk doman
wire  [FIFO_DWID-1:0] fifo_rdata;                              // FIFO read data @rclk doman
wire                  fifo_dvld;                               // fifo read data valid

reg                   fifo_wr;                                 // FIFO write signal @wclk doman
reg   [FIFO_DWID-1:0] fifo_wdata;                              // FIFO write data @wclk doman
reg                   wflush;                                  // FIFO flush @wclk doman
reg                   wclk;                                    // write clock
reg                   wrst_n;                                  // active low reset @wclk doman
reg                   fifo_rd;                                 // FIFO read signal @rclk doman
reg                   rflush;                                  // FIFO flush @rclk doman
reg                   rclk;                                    // read clock
reg                   rrst_n;                                  // active low reset @rclk doman
//other
reg   [7:0]           fifo_cnt;
//--------------------------------------------------------------------------------
//  clocking and reset
//--------------------------------------------------------------------------------
reg clk,clk1;
reg rst_n;


always #10  clk <= ~clk;
always #40 clk1 <= ~clk1;

initial begin
clk  = 0;
clk1 = 0;
rst_n = 0;
wflush = 0;
rflush = 0;
fifo_wr = 0;
fifo_rd = 1'b0;
#40
rst_n = 1;
#10
fifo_wdata = 8'h15;
fifo_wr = 1;
#20
fifo_wr = 0;
#500
fifo_wdata = 8'h20;
fifo_wr = 1;
fifo_rd = 1'b1;
#20
fifo_wr = 0;
#40
fifo_rd = 1'b1;
#500
fifo_wdata = 8'h50;
fifo_wr = 1;
#20
fifo_wr = 0;
#500
fifo_wdata = 8'h28;
fifo_wr = 1;
#20
fifo_wr = 0;
#20
fifo_rd = 1'b1;
#400
fifo_rd = 1'b0;
#500
fifo_wdata = 8'h48;
fifo_wr = 1;
#20
fifo_wr = 0;
#500
fifo_wdata = 8'h25;
fifo_wr = 1;
#20
fifo_wr = 0;
#500
fifo_wdata = 8'h52;
fifo_wr = 1;
#20
fifo_wr = 0;
#500
fifo_wdata = 8'h55;
fifo_wr = 1;
#20
fifo_wr = 0;
#500
fifo_wdata = 8'h11;
fifo_wr = 1;
#20
fifo_wr = 0;
#500
fifo_wdata = 8'h28;
fifo_wr = 1;
#20
fifo_wr = 0;

end
//================================================================================
//  behavior description
//================================================================================
assign wclk = clk;
assign wrst_n = rst_n;
assign rclk = clk1;
assign rrst_n = rst_n;


/*
always@(posedge clk1 or negedge rst_n) begin 
 fifo_rd = 1'b1;
 wait(fifo_dvld)
 #200;
 fifo_rd = 1'b0;
end

*/
/*
always@(posedge clk or negedge rst_n) begin 
  if(~rst_n) begin
    fifo_wdata = 8'b0;
    fifo_cnt   = 4'h0;
  end
  else begin
    fifo_cnt <= fifo_cnt+1;
    fifo_wdata = 8'h15 + fifo_cnt; 
  end
end
*/
//================================================================================
//  module instantiation
//================================================================================

ip_fifo_top 

    #(.FIFO_DWID(FIFO_DWID),
      .FIFO_DEPTH(FIFO_DEPTH)
     )

ip_fifo_top0


(


//----------------------------------------------//
// output  declaration                           //
//----------------------------------------------//

     .fifo_nfull   (fifo_nfull),                             // FIFO near full @wclk doman
     .fifo_full    (fifo_full),                              // FIFO full @wclk doman
     .fifo_nempty  (fifo_nempty),                            // FIFO near empty @rclk doman
     .fifo_empty   (fifo_empty),                             // FIFO empty @rclk doman
     .fifo_rdata   (fifo_rdata),                             // FIFO read data @rclk doman
     .fifo_dvld    (fifo_dvld),                              // fifo read data valid

//----------------------------------------------//
// Input declaration                            //
//----------------------------------------------//

     .fifo_wr     (fifo_wr),                                 // FIFO write signal @wclk doman
     .fifo_wdata  (fifo_wdata),                              // FIFO write data @wclk doman
     .wclk        (wclk),                                    // write clock
     .wrst_n      (wrst_n),                                  // active low reset @wclk doman
     .fifo_rd     (fifo_rd),                                 // FIFO read signal @rclk doman
     .rclk        (rclk),                                    // read clock
     .rrst_n      (rrst_n)                                   // active low reset @rclk doman

);

//--------------------------------------------------------------------------------
//  waveform dump setting
//--------------------------------------------------------------------------------

initial begin 
      $fsdbDumpfile("./wave/test_tb");
      $fsdbDumpvars(0,test_tb,"+all");
      #10000;
      $finish;
end

//--------------------------------------------------------------------------------

endmodule       
