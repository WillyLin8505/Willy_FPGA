// +FHDR -----------------------------------------------------------------------
// Copyright (c) Silicon Optronics. Inc. 2023
//
// File Name:           rsp_top_rtl.v [rsp: raw signal processor]
// Author:              Humphrey Lin
//
// File Description:    Raw signal processor top module
//                      Module hierarchy
//                      rsp_top
//                          -- ip_rawtpat
//                          -- dpc_top
//                          -- sspo
//
//                                 ___________________________________________________________
// o_rsp_href                     |                                                           |
//              __________________|                                                           |_________
//
//                       _________
// o_rsp_hstr           |         |
//              ________|         |_____________________________________________________________________
//
//                                                                                   _________
// o_rsp_hend                                                                       |         |
//              ____________________________________________________________________|         |_________
//
//
//             ____      ____      ____      ____      ____      ____      ____      ____      ____
//   clk      |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
//       _____|    |____|    |____|    |____|    |____|    |____|    |____|    |____|    |____|    |____
//
//
// -FHDR -----------------------------------------------------------------------

module rsp_top

#(
  parameter                         PX_SZ           = 10,       // Pixel size
  parameter                         PX_RATE         = 2,        // Pixel rate [channel #]

  parameter                         HWIN_SZ         = 1928,     // Image H-window size
  parameter                         VWIN_SZ         = 1114,     // Image V-window size
  parameter[ 1:0]                   TPAT_ID         = 2'b00,    // Module instance ID for multi-module instance usage

  parameter                         DDPC_CNT_NUM    = 255,      // Dynamic DPC count number
  parameter                         SDPC_CNT_NUM    = 31,       // Static  DPC count number
  parameter                         RSP_LBF_NAME    = "",       // RSP used Line buffer name

  // local parameter [DON'T modify it !!!]
  parameter                         PX_WD           = PX_SZ * PX_RATE, // Total pixel data width

  parameter                         HCNT_WD         = $clog2(HWIN_SZ), // horizontal counter width
  parameter                         VCNT_WD         = $clog2(VWIN_SZ), // vertical counter width

  parameter                         DDPC_CNT_WD     = $clog2(DDPC_CNT_NUM),
  parameter                         SDPC_CNT_WD     = $clog2(SDPC_CNT_NUM),

//----------------------------------------------------------------dpc para
  parameter DPC_ALG_LVL       = "LVL_0",   // "LVL_0", "LVL_1", "LVL_2"

  parameter DPC_ALG_MODE      = "ALL",     // "SDPC": static DPC only, "DDPC": dynamic DPC only, "ALL": static + dynamic DPC
  parameter IMG_HSZ           = 1928,
  parameter IMG_VSZ           = 1114,

//----------------------------------------------------------------line buffer para
  parameter ODATA_FREQ        = 0,
  parameter BUF_PIXEL_DLY     = 0,
  parameter BUF_LINE_DLY      = 0,
  parameter MEM_TYPE          = "1PSRAM",
  parameter MEM_NAME          = "asic_sram_sp488x80"
        
//----------------------------------------------------------------insert dpc 
  parameter INS_CIW           = 20,
  parameter INS_STEP_WTH      = 1


 )
(
//--------------------------------------------------------------//
// Output declaration                                           //
//--------------------------------------------------------------//

output                              o_rsp_fstr,                 // rsp frame start output
output                              o_rsp_vstr,                 // rsp V-line start output
output                              o_rsp_vend,                 // rsp V-line end output
output                              o_rsp_hstr,                 // rsp H-line start output
output                              o_rsp_hend,                 // rsp H-line end output
output                              o_rsp_href,                 // rsp H-line reference signal output
output                              o_rsp_bidx,                 // rsp BG line index output. "1" BG line, "0": GR line
output  [PX_WD-1:0]                 o_rsp_data,                 // rsp pixel data output. LSB word for ch0

output  [DDPC_CNT_WD-1:0]           o_dpc_wdpc_cnt,             // DPC white defect counter , including static and dynamic
output  [DDPC_CNT_WD-1:0]           o_dpc_bdpc_cnt,             // DPC black defect counter , including static and dynamic
output  [SDPC_CNT_WD-1:0]           o_dpc_sdef_cnt,             // DPC static defect counter [for debug reference]

//--------------------------------------------------------------//
// Input declaration                                            //
//--------------------------------------------------------------//

input                               i_rsp_fstr,                 // frame start
input                               i_rsp_hstr,                 // rsp H-line start input
input                               i_rsp_hend,                 // rsp H-line end input
input                               i_rsp_href,                 // rsp H-line reference signal input
input                               i_rsp_bidx,                 // rsp BG line index input. "1" BG line, "0": GR line
input   [PX_WD-1:0]                 i_rsp_data,                 // rsp pixel data input. LSB for ch0

input   [HCNT_WD-1:0]               i_ssr_haddr_str,            //
input   [VCNT_WD-1:0]               i_ssr_vcnt,                 //

input   [ 1:0]                      r_rsp_tpat0_id,             // Test pattern-0 instance ID
input   [ 7:0]                      r_rsp_tpat0_cfg,            // Test pattern-0 config register
input   [ 7:0]                      r_rsp_tpat1_cfg,            // Test pattern-1 config register

input   [PX_SZ-1:0]                 r_rsp_tpat_colr,            // User specified Spot or Defect embedded pixel color
input   [ 7:0]                      r_rsp_tpat_hdist,           // H-distance for Defect embedded testing pattern
input   [ 7:0]                      r_rsp_tpat_vdist,           // V-distance for Defect embedded testing pattern
input                               r_rsp_mbist_en,             // DPC MBIST enable

input                               r_dpc_en,                   // 0: DPC disable 1: DPC enable
input   [SDPC_CNT_NUM*24-1:0]       r_dpc_def_loc,              // Specified DPC defect location for static DPC
input   [127:0]                     r_rsp_alg_cfg,              // RSP algorithm related configuration

input                               r_ssr_mirr_en,              // sensor mirror enable
input   [ 6:0]                      r_ssr_again,                // sensor PGA 2^[6:4] * (1+[3:0]/16)
input   [ 7:0]                      r_ssr_blc_tgt,              // sensor BLC target

input   [HCNT_WD-1:0]               r_ssr_hwin_hofst,           // ROI window h-starting position
input   [HCNT_WD-1:0]               r_ssr_hwin,                 // ROI window h-window width
input                               r_ssr_px_shf_en,            // Enable shifting of one pixel location [mirror application]
input                               r_ssr_hbin_en,              // H-binning enable
input                               r_ssr_hbin_rto,             // H-binning ratio "0": X2, "1": X4
input                               r_ssr_hbin_opt,             // H-binning option. "0": 1/2 average or 1/4 average,
                                                                //                   "1": (A+B) -/+ BLC target or (A+B+C+D)/2 -/+ BLC target
input   [ 7:0]                      r_ssr_blc_tgt,              // sensor BLC target
input   [ 2:0]                      r_ssr_blc_r_tgt_dlt,        // BLC target difference on R-channel.  [2]: signed bit
input   [ 2:0]                      r_ssr_blc_bg_tgt_dlt,       // BLC target difference on BG-channel. [2]: signed bit
input   [ 2:0]                      r_ssr_blc_rg_tgt_dlt,       // BLC target difference on RG-channel. [2]: signed bit
input   [ 2:0]                      r_ssr_blc_b_tgt_dlt,        // BLC target difference on B-channel.  [2]: signed bit

input                               r_ssr_dgain_en,             // sensor digital gain enable
input   [ 1:0]                      r_ssr_dgain_prcs,           // Digital gain precision option, 00: u2.10; 01: u3.9; 10: u4.8; 11: reserved
input   [11:0]                      r_ssr_dgain_r,              // R-channel  digital gain
input   [11:0]                      r_ssr_dgain_bg,             // BG-channel digital gain
input   [11:0]                      r_ssr_dgain_rg,             // RG-channel digital gain
input   [11:0]                      r_ssr_dgain_b,              // B-channel  digital gain

input                               clk,                        // clock
input                               gt_clk,                     // gated clock
input                               rst_n                       // low-active reset @ clk domain

);

//--------------------------------------------------------------//
// Local Parameter                                              //
//--------------------------------------------------------------//

/*
localparam                          PX_RATE_RTO     = (IPX_RATE/OPX_RATE)*2, // "2" for half line [2 write, 1 read]
                                    PRATE_CWD       = $clog2(PX_RATE_RTO); // pix rate counter width
*/

//--------------------------------------------------------------//
// Register/Wire declaration                                    //
//--------------------------------------------------------------//

wire[PX_WD-1:0]                     raw_tpat_data;

wire                                dpc_vstr;                   // dpc V-line start output
wire                                dpc_vend;                   // dpc V-line end output
wire                                dpc_hstr;                   // dpc H-line start output
wire                                dpc_hend;                   // dpc H-line end output
wire                                dpc_href;                   // dpc H-line reference signal output
wire                                dpc_bidx;                   // dpc BG line index output. "1" BG line, "0": GR line
wire[PX_WD-1:0]                     dpc_data;                   // dpc pixel data output. LSB word for ch0

wire   [11:0]                      r_ssr_drkc;                 // sensor dark current
wire   [11:0]                      r_ssr_cgcf;                 // sensor CG/CF value
wire   [ 9:0]                      r_ssr_ns_parm1;             // sensor pixel noise parameter
wire   [ 3:0]                      r_ssr_ns_parm2;             // sensor circuit noise parameter

wire                                r_dpc_dfemb_en;             // 0: normal, 1: DPC defect embedded enable
wire                                r_dpc_dfemb_mode;           // Defect embedded mode select, 0: defect, 1: dead column
wire                                r_dpc_spot_en;              // 0: normal, 1: DPC detect defect pixel and use r_rsp_tpat_colr to replace it

wire   [ 1:0]                       r_dpc_mode_sel;             // 0: close all function, 1:static 2: dynamic 3: mix mode **************????? close?

wire   [R_LOW_NLM_CIW-1:0]            r_dpc_st1_w_rto_th,     //precision : 3.2 //range : 0~7.75
wire   [2:0]                          r_dpc_st1_w_rto_rng, //range : {1,2,4}
wire   [R_LOW_NLM_CIW-1:0]            r_dpc_st1_b_rto_th,     //precision : 3.2 //range : 0~7.75
wire   [2:0]                          r_dpc_st1_b_rto_rng, //range : {1,2,4}

wire   [R_RTO_THRES_CIW-1:0]          r_dpc_st2_w_rto_th,   //precision : 3.2 //range : 0~7.75
wire   [2:0]                          r_dpc_st2_w_rto_rng,     //range : {1,2,4}
wire   [R_RTO_THRES_CIW-1:0]          r_dpc_st2_b_rto_th,   //precision : 3.2 //range : 0~7.75
wire   [2:0]                          r_dpc_st2_b_rto_rng,     //range : {1,2,4}

wire   [R_CNT_THRES_CIW-1:0]          r_dpc_st2_w_cnt_th,   //precision : 4.2 //range : 0~8
wire   [2:0]                          r_dpc_st2_w_cnt_rng, //range : {1,2,4}
wire   [R_CNT_THRES_CIW-1:0]          r_dpc_st2_b_cnt_th,   //precision : 4.2 //range : 0~8
wire   [2:0]                          r_dpc_st2_b_cnt_rng, //range : {1,2,4}


genvar  gi;

//--------------------------------------------------------------//
// Code Descriptions                                            //
//--------------------------------------------------------------//

assign  o_rsp_vstr = dpc_vstr;
assign  o_rsp_vend = dpc_vend;
assign  o_rsp_hstr = dpc_hstr;
assign  o_rsp_hend = dpc_hend;
assign  o_rsp_href = dpc_href;
assign  o_rsp_bidx = dpc_bidx;
assign  o_rsp_data = dpc_data;

//
assign  r_dpc_dfemb_en   = r_rsp_tpat1_cfg[0];
assign  r_dpc_dfemb_mode = r_rsp_tpat1_cfg[1];
assign  r_dpc_spot_en    = r_rsp_tpat1_cfg[4];

//
assign  r_rsp_drkc = {r_rsp_alg_cfg[8* 2   +: 4],
                      r_rsp_alg_cfg[8* 0   +: 8]};
assign  r_rsp_cgcf = {r_rsp_alg_cfg[8* 2+4 +: 4],
                      r_rsp_alg_cfg[8* 1   +: 8]};

assign  r_rsp_ns_parm1 = {r_rsp_alg_cfg[8* 4 +: 2],
                          r_rsp_alg_cfg[8* 3 +: 8]};
assign  r_rsp_ns_parm2 =  r_rsp_alg_cfg[8* 5 +: 4];

//
assign  r_dpc_mode_sel      = r_rsp_alg_cfg[8* 6   +: 2];

assign  r_dpc_st1_w_rto_th  = r_rsp_alg_cfg[8* 7   +: 5];
assign  r_dpc_st1_b_rto_th  = r_rsp_alg_cfg[8* 8   +: 5];
assign  r_dpc_st1_w_rto_rng = r_rsp_alg_cfg[8* 9   +: 3];
assign  r_dpc_st1_b_rto_rng = r_rsp_alg_cfg[8* 9+4 +: 3];

assign  r_dpc_st2_w_rto_th  = r_rsp_alg_cfg[8*10   +: 5];
assign  r_dpc_st2_b_rto_th  = r_rsp_alg_cfg[8*11   +: 5];
assign  r_dpc_st2_w_rto_rng = r_rsp_alg_cfg[8*12   +: 3];
assign  r_dpc_st2_b_rto_rng = r_rsp_alg_cfg[8*12+4 +: 3];

assign  r_dpc_st2_w_cnt_th  = r_rsp_alg_cfg[8*13   +: 6];
assign  r_dpc_st2_b_cnt_th  = r_rsp_alg_cfg[8*14   +: 6];
assign  r_dpc_st2_w_cnt_rng = r_rsp_alg_cfg[8*15   +: 3];
assign  r_dpc_st2_b_cnt_rng = r_rsp_alg_cfg[8*15+4 +: 3];


// Sequential Logic                                             //
//--------------------------------------------------------------//


// Module Instance
//--------------------------------------------------------------//

ip_rawtpat
#(
        .TPAT_ID                    (TPAT_ID),
        .PX_SZ                      (PX_SZ),
        .PX_RATE                    (PX_RATE),
        .HWIN_SZ                    (HWIN_SZ),
        .VWIN_SZ                    (VWIN_SZ)
 )
ip_rawtpat (
        // output
        .o_tpat_data                (raw_tpat_data),
        .o_tpat_en                  (),

        // input
        .i_tpat_fstr                (i_rsp_fstr),
        .i_tpat_hstr                (i_rsp_hstr),
        .i_tpat_href                (i_rsp_href),
        .i_tpat_bidx                (i_rsp_bidx),

        .i_tpat_data                (i_rsp_data),
        .i_tpat_vcnt                (i_ssr_vcnt),

        .r_tpat_id_sel              (r_rsp_tpat0_id),
        .r_tpat_cfg                 (r_rsp_tpat0_cfg),

        .clk                        (clk),
        .rst_n                      (rst_n)
        );



dpc_top

#(
        .DPC_NUM                    (DPC_NUM        ),
        
//----------------------------------------------------------------insert dpc 
        .INS_CIW                    (INS_CIW        ),
        
//----------------------------------------------------------------dpc para
        .ALG_LVL                    (DPC_ALG_LVL),
        .ALG_MODE                   (DPC_ALG_MODE   ),
        .IMG_HSZ                    (IMG_HSZ        ),
        .IMG_VSZ                    (IMG_VSZ        ),

//----------------------------------------------------------------line buffer para
        .ODATA_FREQ                 (ODATA_FREQ     ),
        .BUF_PIXEL_DLY              (BUF_PIXEL_DLY  ),
        .BUF_LINE_DLY               (BUF_LINE_DLY   ),
        .MEM_TYPE                   (MEM_TYPE       ),
        .MEM_NAME                   (MEM_NAME       ),
        .SRAM_NUM                   (SRAM_NUM       )

        
        )

dpc_top (
//---------------------------------------------------------------------------------output 
        .o_dpc_data                 ( ),
        .o_dpc_href                 (               ),
        .o_dpc_vstr                 (               ),
        .o_dpc_hstr                 (               ),
        .o_dpc_hend                 (               ),
        .o_dpc_vend                 (               ),
        .o_rso_bidx                 (                       ),
        .o_dpc_wdpc_cnt             ( ),
        .o_dpc_bdpc_cnt             ( ),
        .o_static_num_cnt           ( ),
        
//---------------------------------------------------------------------------------input 
//----------------------------------------------------------------line buf
        .i_hend                     ( i_rsp_hend                ),
        .i_fstr                     (),

//----------------------------------------------------------------insert dpc 
        .i_data                     (                 ),
        .i_hstr                     (                 ),
        .i_href                     (                 ),
        
//----------------------------------------------------------------dpc
        .i_rso_bidx                 ( 1'b1                    ),           //VCNT_WD.0  
        .i_dpc_ver_addr             ( tb_dpc_ver_cnt          ), 
    
//---------------------------------------------------------------------------------register        
//----------------------------------------------------------------dpc  
        .r_step1_w_low_nlm          ( r_dpc_st1_w_rto_th     ),     //3.2
        .r_step1_w_transit_rng      ( r_dpc_st1_w_rto_rng ),        //3.0
        .r_step1_b_low_nlm          ( r_dpc_st1_b_rto_th     ),     //3.2
        .r_step1_b_transit_rng      ( r_dpc_st1_b_rto_rng ),        //3.0

        .r_step2_w_rto_thres        ( r_dpc_st2_w_rto_th   ),       //3.2
        .r_step2_w_buf_rng          ( r_dpc_st2_w_rto_rng     ),    //3.0
        .r_step2_b_rto_thres        ( r_dpc_st2_b_rto_th   ),       //3.2
        .r_step2_b_buf_rng          ( r_dpc_st2_b_rto_rng     ),    //3.0

        .r_step2_w_cnt_thres        ( r_dpc_st2_w_cnt_th   ),       //4.2
        .r_step2_w_cnt_buf_rng      ( r_dpc_st2_w_cnt_rng),         //3.0
        .r_step2_b_cnt_thres        ( r_dpc_st2_b_cnt_th),          //4.2
        .r_step2_b_cnt_buf_rng      ( r_dpc_st2_b_cnt_rng),         //3.0

        .r_dpc_en                   (r_dpc_en),                     //1.0        //sta 
        .r_dpc_debug_en             (),                             //1.0        //sta 
        .r_dpc_mode_sel             (r_dpc_mode_sel),               //2.0        //sta 
        .r_dpc_repl_col             (r_rsp_tpat_colr),              //RAW_CIIW.0 //sta 
          
        .r_dpc_static_coord         (r_dpc_def_loc),                //480.0      //sta 
        .r_dpc_coord_mirror         (r_ssr_mirr_en),                //1.0        //sta 
        .r_dpc_haddr_start          (i_ssr_haddr_str),              //HCNT_WD.0  //sta 
        
//----------------------------------------------------------------cu 
        .r_ssr_again                ( r_ssr_again           ),      //3.4
        .r_ssr_blc_tgt              ( r_ssr_blc_tgt         ),      //12.0
        .r_ssr_drkc                 ( r_rsp_drkc            ),      //12.0
        .r_ssr_cgcf                 ( r_rsp_cgcf            ),      //0.12
        .r_ssr_ns_parm1             ( r_rsp_ns_parm1        ),      //0.10
        .r_ssr_ns_parm2             ( r_rsp_ns_parm2        ),      //0.4
        
//----------------------------------------------------------------insert dpc 
        .r_ins_en                   (),                                          //sta 
        .r_ins_mode_sel             ( ),  //1.0                                  //sta 
        .r_ins_clr_chg              (),   //RAW_CIIW.0                           //sta 
        .r_ins_hstep                (),   //8.0                                  //sta 
        .r_ins_vstep                (),   //8.0                                  //sta 
    
//---------------------------------------------------------------------------------general 
        .clk                        ( clk),
        .gated_clk                  ( gated_clk),
        .rst_n                      ( rst_n)
);


sspo
#(
        .PX_SZ                      (PX_SZ),
        .PX_RATE                    (PX_RATE),
        .HWIN_SZ                    (HWIN_SZ),
        .VWIN_SZ                    (VWIN_SZ)
 )
sspo (
        // output
        .o_sspo_fstr                (o_sspo_fstr)
        .o_sspo_vstr                (o_sspo_vstr),
        .o_sspo_vend                (o_sspo_vend),
        .o_sspo_hstr                (o_sspo_hstr),
        .o_sspo_hend                (o_sspo_hend),
        .o_sspo_href                (o_sspo_href),
        .o_sspo_bidx                (o_sspo_bidx),
        .o_sspo_data                (o_sspo_data),

        // input
        .i_sspi_fstr                (i_sspi_fstr)
        .i_sspi_vstr                (i_sspi_vstr),
        .i_sspi_vend                (i_sspi_vend),
        .i_sspi_hstr                (i_sspi_hstr),
        .i_sspi_hend                (i_sspi_hend),
        .i_sspi_href                (i_sspi_href),
        .i_sspi_bidx                (i_sspi_bidx),
        .i_sspi_data                (i_sspi_data),

        .r_ssr_hwin_hofst           (r_ssr_hwin_hofst),
        .r_ssr_hwin                 (r_ssr_hwin),
        .r_ssr_px_shf_en            (r_ssr_px_shf_en),
        .r_ssr_hbin_en              (r_ssr_hbin_en),
        .r_ssr_hbin_rto             (r_ssr_hbin_rto),
        .r_ssr_hbin_opt             (r_ssr_hbin_opt),

        .r_ssr_blc_tgt              (r_ssr_blc_tgt),
        .r_ssr_blc_r_tgt_dlt        (r_ssr_blc_r_tgt_dlt),
        .r_ssr_blc_bg_tgt_dlt       (r_ssr_blc_bg_tgt_dlt),
        .r_ssr_blc_rg_tgt_dlt       (r_ssr_blc_rg_tgt_dlt),
        .r_ssr_blc_b_tgt_dlt        (r_ssr_blc_b_tgt_dlt ),

        .r_ssr_dgain_en             (r_ssr_dgain_en),
        .r_ssr_dgain_prcs           (r_ssr_dgain_prcs),
        .r_ssr_dgain_r              (r_ssr_dgain_r),
        .r_ssr_dgain_bg             (r_ssr_dgain_bg),
        .r_ssr_dgain_rg             (r_ssr_dgain_rg),
        .r_ssr_dgain_b              (r_ssr_dgain_b),

        .clk                        (clk),
        .rst_n                      (rst_n)
        );


endmodule

