// +FHDR -----------------------------------------------------------------------
// Copyright (c) Silicon Optronics. Inc. 2022
//
// File Name:           border_rtl.v
// Author:              Willy Lin
// Version:             1.0
// Date:                2022/2/8
// Last Modified On:    
// Last Modified By:    $Author$
//
// File Description:    draw the border of face detect 
//                      
// -FHDR -----------------------------------------------------------------------

module border

   #( 
      parameter  BORDER_COR_WIDTH  = 12,
      parameter  IMG_HSZ           = 1920,
      parameter  IMG_VSZ           = 1200,
      parameter  BORDER_DATA_WIDTH = 8
     )

(
//----------------------------------------------//
// Local Parameter                              //
//----------------------------------------------//


//----------------------------------------------//
// Output declaration                           //
//----------------------------------------------//
 
output reg                                                       o_hstr,
output reg                                                       o_hend,
output reg                                                       o_vstr,
output reg                                                       o_vend,
output reg                                                       o_dvld,
output     [BORDER_DATA_WIDTH-1:0]                               o_data_y,
output     [BORDER_DATA_WIDTH-1:0]                               o_data_cb,
output     [BORDER_DATA_WIDTH-1:0]                               o_data_cr,


//----------------------------------------------//
// Input declaration                            //
//----------------------------------------------//

input                                                            i_vstr, 
input                                                            i_vend, 
input                                                            i_hstr, 
input                                                            i_hend, 
input                                                            i_dvld, 
input                                                            i_fend,
input      [BORDER_DATA_WIDTH-1:0]                               i_data_y,
input      [BORDER_DATA_WIDTH-1:0]                               i_data_cb,
input      [BORDER_DATA_WIDTH-1:0]                               i_data_cr,

input                                                            r_border_en,
input                                                            r_border_type,
input      [BORDER_DATA_WIDTH-1:0]                               r_border_y,
input      [BORDER_DATA_WIDTH-1:0]                               r_border_cb,
input      [BORDER_DATA_WIDTH-1:0]                               r_border_cr,
input      [4:0]                                                 r_border_width,
input      [1:0]                                                 r_trn_rate,

input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_0_1st,
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_0_2nd, 
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_1_1st,
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_1_2nd, 
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_2_1st,
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_2_2nd, 
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_3_1st,
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_3_2nd,           
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_4_1st,
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_4_2nd, 
                                                                   
input                                                            border_clk,             
input                                                            border_rst_n          


);

//----------------------------------------------//
// Register & Wire declaration                  //
//----------------------------------------------//
genvar                                 ix,pad_ix,d_ix;
//-----------------------------------------------------counter 
reg         [BORDER_COR_WIDTH-1:0]     hor_cnt;               
wire        [BORDER_COR_WIDTH-1:0]     hor_cnt_nxt;  
wire                                   hor_cnt_int;
wire                                   hor_cnt_clr; 

reg         [BORDER_COR_WIDTH-1:0]     ver_cnt;               
wire        [BORDER_COR_WIDTH-1:0]     ver_cnt_nxt;            
wire                                   ver_cnt_int;
wire                                   ver_cnt_clr; 

//--------------------------------------------------------------------------------------coordinate resemable
wire        [11:0]                     ri_coord_x                 [0:9] ;
wire        [11:0]                     ri_coord_y                 [0:9] ;

//--------------------------------------------------------------------------------------coordinate  control 
wire                                   coord_x_ctrl_0             [0:4] ;
wire                                   coord_x_ctrl_1             [0:4] ;
wire                                   coord_y_ctrl_0             [0:4] ;
wire                                   coord_y_ctrl_1             [0:4] ;
wire signed [5:0]                      ri_border_x_sign_0         [0:4] ;
wire signed [5:0]                      ri_border_x_sign_1         [0:4] ;
wire signed [5:0]                      ri_border_y_sign_0         [0:4] ;
wire signed [5:0]                      ri_border_y_sign_1         [0:4] ;
wire        [11:0]                     ri_border_blank_x_1        [0:4] ;
wire        [11:0]                     ri_border_blank_x_2        [0:4] ;
wire        [11:0]                     ri_border_blank_x_ctrl     [0:4] ; 
wire        [11:0]                     ri_border_blank_x_com      [0:4] ;
wire        [11:0]                     ri_border_blank_y_1        [0:4] ;
wire        [11:0]                     ri_border_blank_y_2        [0:4] ;
wire        [11:0]                     ri_border_blank_y_ctrl     [0:4] ; 
wire        [11:0]                     ri_border_blank_y_com      [0:4] ;

//--------------------------------------------------------------------------------------pad coordinate 
wire signed [11:0]                     ri_coord_x_keep_pad        [0:4] ;
wire signed [11:0]                     ri_coord_y_keep_pad        [0:4] ;
wire signed [11:0]                     ri_coord_x_pad             [0:4] ;
wire signed [11:0]                     ri_coord_y_pad             [0:4] ;

//--------------------------------------------------------------------------------------original coordinate  
wire        [11:0]                     ri_coord_x_keep            [0:4] ;
wire        [11:0]                     ri_coord_y_keep            [0:4] ;
wire signed [11:0]                     ri_coord_x_cal             [0:4] ;
wire signed [11:0]                     ri_coord_y_cal             [0:4] ;

//--------------------------------------------------------------------------------------enable region 
wire        [4:0]                      coord_x_en_nxt;
reg         [4:0]                      coord_x_en;
wire        [4:0]                      coord_y_en_nxt;
reg         [4:0]                      coord_y_en;
wire        [4:0]                      coord_x_pad_en_nxt;
reg         [4:0]                      coord_x_pad_en;
wire                                   coord_y_pad_en_nxt         [0:4] ;
reg                                    coord_y_pad_en             [0:4] ;
wire        [4:0]                      coord_comb_en;
wire        [4:0]                      coord_pad_comb_en;
reg                                    coord_x_blank_en           [0:4] ;
wire                                   coord_x_blank_en_nxt       [0:4] ;
reg                                    coord_y_blank_en           [0:4] ;
wire                                   coord_y_blank_en_nxt       [0:4] ;

//-----------------------------------------------------data
wire signed [5:0]                      border_width_cal;
wire        [7:0]                      ri_orig_in_data            [0:5] ;
wire signed [7:0]                      ri_trans_data              [0:5] ;
wire        [7:0]                      ri_shift_data              [0:2] ;
wire        [7:0]                      border_data_cb_nxt;
wire        [7:0]                      border_data_cr_nxt;
wire        [7:0]                      border_data_y_nxt;
reg         [7:0]                      border_data_cb;
reg         [7:0]                      border_data_cr;
reg         [7:0]                      border_data_y;
wire        [7:0]                      test_1                  [0:2] ;
wire signed [7:0]                      test_2                  [0:2] ;
wire        [7:0]                      test_3                  [0:2] ;
wire        [7:0]                      test_4                  [0:2] ;

//-----------------------------------------------------output 

//-----------------------------------------------------others

//----------------------------------------------//
// Code Descriptions                            //
//----------------------------------------------//
//---------------------------------------------------------------------counter 
assign hor_cnt_nxt  = (hor_cnt_int ? hor_cnt + 1'b1 : hor_cnt) & {(BORDER_COR_WIDTH){~hor_cnt_clr}};
assign hor_cnt_int  = i_dvld;
assign hor_cnt_clr  = i_hend;

assign ver_cnt_nxt  = (ver_cnt_int ? ver_cnt + 1'b1 : ver_cnt) & {(BORDER_COR_WIDTH){~ver_cnt_clr}};
assign ver_cnt_int  = i_hend;
assign ver_cnt_clr  = i_fend;
//---------------------------------------------------------------------coordinate resemable
assign ri_coord_x [0]  = r_coord_0_1st[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_x [1]  = r_coord_1_1st[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_x [2]  = r_coord_2_1st[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_x [3]  = r_coord_3_1st[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_x [4]  = r_coord_4_1st[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_x [5]  = r_coord_0_2nd[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_x [6]  = r_coord_1_2nd[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_x [7]  = r_coord_2_2nd[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_x [8]  = r_coord_3_2nd[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_x [9]  = r_coord_4_2nd[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];

assign ri_coord_y [0]  = r_coord_0_1st[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_y [1]  = r_coord_1_1st[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_y [2]  = r_coord_2_1st[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_y [3]  = r_coord_3_1st[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_y [4]  = r_coord_4_1st[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_y [5]  = r_coord_0_2nd[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_y [6]  = r_coord_1_2nd[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_y [7]  = r_coord_2_2nd[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_y [8]  = r_coord_3_2nd[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_y [9]  = r_coord_4_2nd[BORDER_COR_WIDTH - 1 : 0];

assign border_width_cal            = (|r_border_width) ? {1'b0,r_border_width} : 6'h01;                       //border width cannot be zero; 

generate begin 
  for (pad_ix=0 ; pad_ix <= 4 ; pad_ix = pad_ix + 1 ) begin 
//--------------------------------------------------------------------------------------coordinate control 
    assign coord_x_ctrl_0[pad_ix]         = (border_width_cal < ri_coord_x[pad_ix]);                          //first point condition 
    assign coord_x_ctrl_1[pad_ix]         = (border_width_cal + ri_coord_x[pad_ix+5]) < IMG_HSZ;              //second point condition 
    assign ri_border_x_sign_0[pad_ix]     = coord_x_ctrl_0[pad_ix] ? -border_width_cal :  border_width_cal;  
    assign ri_border_x_sign_1[pad_ix]     = coord_x_ctrl_1[pad_ix] ?  border_width_cal : -border_width_cal;   

    assign coord_y_ctrl_0[pad_ix]         = (border_width_cal < ri_coord_y[pad_ix]);                          //first point condition 
    assign coord_y_ctrl_1[pad_ix]         = (border_width_cal + ri_coord_y[pad_ix+5]) < IMG_VSZ;              //second point condition 
    assign ri_border_y_sign_0[pad_ix]     = coord_y_ctrl_0[pad_ix] ? -border_width_cal :  border_width_cal;  
    assign ri_border_y_sign_1[pad_ix]     = coord_y_ctrl_1[pad_ix] ?  border_width_cal : -border_width_cal;  
 
    assign ri_border_blank_x_1[pad_ix]    = (ri_coord_x[pad_ix] + ri_coord_x[pad_ix+5]) >> 1;
    assign ri_border_blank_x_2[pad_ix]    = (ri_coord_x[pad_ix+5] - ri_border_blank_x_1[pad_ix]) >> 1;
    assign ri_border_blank_x_ctrl[pad_ix] = coord_x_blank_en[pad_ix] ? ri_border_blank_x_2[pad_ix] : -ri_border_blank_x_2[pad_ix];
    assign ri_border_blank_x_com[pad_ix]  = ri_border_blank_x_1[pad_ix] + $signed(ri_border_blank_x_ctrl[pad_ix]);

    assign ri_border_blank_y_1[pad_ix]    = (ri_coord_y[pad_ix] + ri_coord_y[pad_ix+5]) >> 1;
    assign ri_border_blank_y_2[pad_ix]    = (ri_coord_y[pad_ix+5] - ri_border_blank_y_1[pad_ix]) >> 1;
    assign ri_border_blank_y_ctrl[pad_ix] = coord_y_blank_en[pad_ix] ? ri_border_blank_y_2[pad_ix] : -ri_border_blank_y_2[pad_ix];
    assign ri_border_blank_y_com[pad_ix]  = ri_border_blank_y_1[pad_ix] + $signed(ri_border_blank_y_ctrl[pad_ix]);

//--------------------------------------------------------------------------------------pad coordinate 
// if border exceed the verge of picture the border will expend from coordinate,otherwise border will indent from coordinate  
    assign ri_coord_x_keep_pad[pad_ix]    = coord_x_pad_en[pad_ix] ? ri_coord_x [pad_ix+5] : ri_coord_x [pad_ix] ;
    assign ri_coord_x_pad[pad_ix]         = coord_x_pad_en[pad_ix] ? 
                                            ri_coord_x_keep_pad[pad_ix] + $signed({12{coord_x_ctrl_1[pad_ix]}} & {{6{ri_border_x_sign_1[pad_ix][5]}}, ri_border_x_sign_1[pad_ix]}):  
                                            ri_coord_x_keep_pad[pad_ix] + $signed({12{coord_x_ctrl_0[pad_ix]}} & {{6{ri_border_x_sign_0[pad_ix][5]}}, ri_border_x_sign_0[pad_ix]});  
    assign ri_coord_y_keep_pad[pad_ix]    = coord_y_pad_en[pad_ix] ? ri_coord_y [pad_ix+5] : ri_coord_y [pad_ix];
    assign ri_coord_y_pad[pad_ix]         = coord_y_pad_en[pad_ix] ? 
                                            ri_coord_y_keep_pad[pad_ix] + $signed({12{coord_y_ctrl_1[pad_ix]}} & {{6{ri_border_y_sign_1[pad_ix][5]}}, ri_border_y_sign_1[pad_ix]}):
                                            ri_coord_y_keep_pad[pad_ix] + $signed({12{coord_y_ctrl_0[pad_ix]}} & {{6{ri_border_y_sign_0[pad_ix][5]}}, ri_border_y_sign_0[pad_ix]});

//--------------------------------------------------------------------------------------original coordinate  
// if border exceed the verge of picture the border will expend from coordinate,otherwise border will indent from coordinate  
    assign ri_coord_x_keep[pad_ix]        = coord_x_en[pad_ix] ? ri_coord_x [pad_ix+5] : ri_coord_x [pad_ix] ;
    assign ri_coord_x_cal[pad_ix]         = coord_x_en[pad_ix] ? 
                                            ri_coord_x_keep[pad_ix] + $signed({12{!coord_x_ctrl_1[pad_ix]}} & {{6{ri_border_x_sign_1[pad_ix][5]}}, ri_border_x_sign_1[pad_ix]}):
                                            ri_coord_x_keep[pad_ix] + $signed({12{!coord_x_ctrl_0[pad_ix]}} & {{6{ri_border_x_sign_0[pad_ix][5]}}, ri_border_x_sign_0[pad_ix]});

    assign ri_coord_y_keep[pad_ix]        = coord_y_en[pad_ix] ? ri_coord_y [pad_ix+5] : ri_coord_y [pad_ix] ;
    assign ri_coord_y_cal[pad_ix]         = coord_y_en[pad_ix] ? 
                                            ri_coord_y_keep[pad_ix] + $signed({12{!coord_y_ctrl_1[pad_ix]}} & {{6{ri_border_y_sign_1[pad_ix][5]}}, ri_border_y_sign_1[pad_ix]}):
                                            ri_coord_y_keep[pad_ix] + $signed({12{!coord_y_ctrl_0[pad_ix]}} & {{6{ri_border_y_sign_0[pad_ix][5]}}, ri_border_y_sign_0[pad_ix]});

//--------------------------------------------------------------------------------------enable region 
    assign coord_x_en_nxt[pad_ix]         = (($unsigned(ri_coord_x_cal [pad_ix]) == hor_cnt) | coord_x_en[pad_ix]) & 
                                            !($unsigned(ri_coord_x_cal [pad_ix]) ==(hor_cnt-1));                        //origin coordinate region (x)
    assign coord_y_en_nxt[pad_ix]         = (($unsigned(ri_coord_y_cal [pad_ix]) == ver_cnt) | coord_y_en[pad_ix]) & 
                                            !($unsigned(ri_coord_y_cal [pad_ix]) ==(ver_cnt-1));                        //origin coordinate region (y)
    assign coord_x_pad_en_nxt[pad_ix]     = (($unsigned(ri_coord_x_pad [pad_ix]) == hor_cnt) | coord_x_pad_en[pad_ix]) & 
                                            !($unsigned(ri_coord_x_pad [pad_ix]) ==(hor_cnt-1));
    assign coord_y_pad_en_nxt[pad_ix]     = (($unsigned(ri_coord_y_pad [pad_ix]) == ver_cnt) | coord_y_pad_en[pad_ix]) & 
                                            !($unsigned(ri_coord_y_pad [pad_ix]) ==(ver_cnt-1));

    assign coord_x_blank_en_nxt[pad_ix]   = (ri_border_blank_x_com[pad_ix] == hor_cnt) ^ (coord_x_blank_en[pad_ix]);
    assign coord_y_blank_en_nxt[pad_ix]   = (ri_border_blank_y_com[pad_ix] == ver_cnt) & !((ri_border_blank_y_com[pad_ix] == ver_cnt) & coord_y_blank_en[pad_ix]);
    assign coord_comb_en[pad_ix]          = coord_x_en_nxt[pad_ix] & coord_y_en_nxt[pad_ix] &                                   //origin region 
                                            !((coord_x_blank_en_nxt[pad_ix] | coord_y_blank_en_nxt[pad_ix]) & r_border_type);   //blank control 
    assign coord_pad_comb_en[pad_ix]      = coord_x_pad_en_nxt[pad_ix] & coord_y_pad_en_nxt[pad_ix] &                           //padding region 
                                           !((coord_x_blank_en_nxt[pad_ix] | coord_y_blank_en_nxt[pad_ix]) & r_border_type);    //blank control 
 

    always@(posedge border_clk or negedge border_rst_n) begin 
    if(!border_rst_n) begin 
      coord_x_pad_en[pad_ix]  <= 0;
      coord_y_pad_en[pad_ix]  <= 0;
      coord_x_en[pad_ix]      <= 0; 
      coord_y_en[pad_ix]      <= 0;
      coord_x_blank_en[pad_ix]<= 0;
      coord_y_blank_en[pad_ix]<= 0;
    end
    else begin 
      coord_x_pad_en[pad_ix]  <= coord_x_pad_en_nxt[pad_ix];
      coord_y_pad_en[pad_ix]  <= coord_y_pad_en_nxt[pad_ix];
      coord_x_en[pad_ix]      <= coord_x_en_nxt[pad_ix];
      coord_y_en[pad_ix]      <= coord_y_en_nxt[pad_ix];
      coord_x_blank_en[pad_ix]<= coord_x_blank_en_nxt[pad_ix];
      coord_y_blank_en[pad_ix]<= coord_y_blank_en_nxt[pad_ix];
    end 
    end 

  end
end
endgenerate



//---------------------------------------------------------------------data part
assign ri_orig_in_data[0]             = i_data_y;
assign ri_orig_in_data[1]             = i_data_cb;
assign ri_orig_in_data[2]             = i_data_cr;
assign ri_orig_in_data[3]             = r_border_y;
assign ri_orig_in_data[4]             = r_border_cb;
assign ri_orig_in_data[5]             = r_border_cr;

generate begin //control the transparency of border 
  for (d_ix=0;d_ix<=2;d_ix=d_ix+1) begin 
    assign ri_shift_data[d_ix]        = (ri_orig_in_data[d_ix] >> 2);
    assign ri_trans_data[d_ix]        = ((|coord_pad_comb_en) & !(|coord_comb_en) & r_border_en )?
                                        ((r_trn_rate == 2'h0) ? 8'h00 :                                                                  //0%
                                        (({BORDER_DATA_WIDTH   {r_trn_rate[0]}} & (ri_orig_in_data[d_ix] >> 1)) +                        //50%
                                        ( {BORDER_DATA_WIDTH   {r_trn_rate[1]}} & ri_shift_data[d_ix]))) :                               //25%
                                        ri_orig_in_data[d_ix];                                                                           //100%

    assign ri_trans_data[d_ix+3]      = ((|coord_pad_comb_en) & !(|coord_comb_en) & r_border_en )?
                                        ((r_trn_rate == 2'h0) ? ri_orig_in_data[d_ix+3] :                                                //100%
                                        (({BORDER_DATA_WIDTH      {r_trn_rate[1]}}                & (ri_orig_in_data[d_ix+3] >> 2)) +    //25%
                                        ( {BORDER_DATA_WIDTH     {(r_trn_rate[0]^r_trn_rate[1])}} & (ri_orig_in_data[d_ix+3] >> 1)))):   //50%
                                        8'h00;                                                                                           //0%

    assign test_1[d_ix]            = ({BORDER_DATA_WIDTH   {r_trn_rate[0]}} & (ri_orig_in_data[d_ix] >> 1)) ;
    assign test_2[d_ix]            = ( {BORDER_DATA_WIDTH   {r_trn_rate[1]}} & ri_shift_data[d_ix]);
    assign test_3[d_ix]            = {BORDER_DATA_WIDTH{r_trn_rate[1]}} & (ri_orig_in_data[d_ix+3] >> 2);
    assign test_4[d_ix]            = {BORDER_DATA_WIDTH{(r_trn_rate[0]^r_trn_rate[1])}} & (ri_orig_in_data[d_ix+3] >> 1);
  end
end
endgenerate

assign {border_data_cb_nxt,
        border_data_cr_nxt,
        border_data_y_nxt}         = $unsigned({(ri_trans_data[1]+ri_trans_data[4]),(ri_trans_data[2]+ri_trans_data[5]),(ri_trans_data[0]+ri_trans_data[3])});


//---------------------------------------------------------------------output 
assign o_data_y                    = border_data_y;
assign o_data_cb                   = border_data_cb;
assign o_data_cr                   = border_data_cr;

//-------------------------------------------------------------------combination 

always@(posedge border_clk or negedge border_rst_n) begin 
if(!border_rst_n) begin 
//--------------------------------------------------------------------counter 
  hor_cnt            <= 0;
  ver_cnt            <= 0;

end
else begin 
//--------------------------------------------------------------------counter 
  hor_cnt            <= hor_cnt_nxt;
  ver_cnt            <= ver_cnt_nxt;

//---------------------------------------------------------------------output
  o_hstr             <= i_hstr;
  o_hend             <= i_hend;
  o_vstr             <= i_vstr;
  o_vend             <= i_vend;
  o_dvld             <= i_dvld;
  border_data_y      <= border_data_y_nxt;
  border_data_cb     <= border_data_cb_nxt;
  border_data_cr     <= border_data_cr_nxt;
end 
end 

endmodule 
