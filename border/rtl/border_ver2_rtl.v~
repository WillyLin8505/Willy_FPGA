// +FHDR -----------------------------------------------------------------------
// Copyright (c) Silicon Optronics. Inc. 2022
//
// File Name:           border_rtl.v
// Author:              Willy Lin
// Version:             1.0
// Date:                2022/2/8
// Last Modified On:    
// Last Modified By:    $Author$
//
// File Description:    draw the border of face detect 
//                      
// -FHDR -----------------------------------------------------------------------

module border

   #( 
      parameter  BORDER_COR_WIDTH  = 12,
      parameter  IMG_HSZ           = 1920,
      parameter  IMG_VSZ           = 1200,
      parameter  BORDER_DATA_WIDTH = 8
     )

(
//----------------------------------------------//
// Local Parameter                              //
//----------------------------------------------//


//----------------------------------------------//
// Output declaration                           //
//----------------------------------------------//
 
output reg                                                       o_hstr,
output reg                                                       o_hend,
output reg                                                       o_vstr,
output reg                                                       o_vend,
output reg                                                       o_dvld,
output     [BORDER_DATA_WIDTH-1:0]                               o_data_y,
output     [BORDER_DATA_WIDTH-1:0]                               o_data_cb,
output     [BORDER_DATA_WIDTH-1:0]                               o_data_cr,


//----------------------------------------------//
// Input declaration                            //
//----------------------------------------------//

input                                                            i_vstr, 
input                                                            i_vend, 
input                                                            i_hstr, 
input                                                            i_hend, 
input                                                            i_dvld, 
input                                                            i_fstr,
input                                                            i_fend,
input      [BORDER_DATA_WIDTH-1:0]                               i_data_y,
input      [BORDER_DATA_WIDTH-1:0]                               i_data_cb,
input      [BORDER_DATA_WIDTH-1:0]                               i_data_cr,

input      [4:0]                                                 r_border_en,
input                                                            r_border_type,
input      [BORDER_DATA_WIDTH-1:0]                               r_border_y,
input      [BORDER_DATA_WIDTH-1:0]                               r_border_cb,
input      [BORDER_DATA_WIDTH-1:0]                               r_border_cr,
input      [4:0]                                                 r_border_width,
input      [1:0]                                                 r_trn_rate,

input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_0_1st,
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_0_2nd, 
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_1_1st,
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_1_2nd, 
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_2_1st,
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_2_2nd, 
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_3_1st,
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_3_2nd,           
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_4_1st,
input      [BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1:0]           r_coord_4_2nd, 
                                                                   
input                                                            border_clk,             
input                                                            border_rst_n          


);

//----------------------------------------------//
// Register & Wire declaration                  //
//----------------------------------------------//
genvar                                 ix,pad_ix,d_ix;
integer                                i;
//-----------------------------------------------------counter 
reg         [BORDER_COR_WIDTH-1:0]     hor_cnt;               
wire        [BORDER_COR_WIDTH-1:0]     hor_cnt_nxt;  
wire                                   hor_cnt_int;
wire                                   hor_cnt_clr; 

reg         [BORDER_COR_WIDTH-1:0]     ver_cnt;               
wire        [BORDER_COR_WIDTH-1:0]     ver_cnt_nxt;            
wire                                   ver_cnt_int;
wire                                   ver_cnt_clr; 

reg         [2:0]                      ctrl_cnt;               
wire        [2:0]                      ctrl_cnt_nxt;            
wire                                   ctrl_cnt_int;
wire                                   ctrl_cnt_clr; 

//--------------------------------------------------------------------------------------coordinate control (control float)
wire                                   h_keep_nxt;
reg                                    h_keep;
wire        [BORDER_COR_WIDTH-1:0]     ri_coord_orig              [0:19] ;
wire        [BORDER_COR_WIDTH-1:0]     border_compare;
wire                                   coord_ctrl_0;
wire                                   coord_ctrl_1;
wire                                   coord_ctrl;
wire                                   coord_blank_ctrl;
wire signed [5:0]                      border_width_cal_sgn;
wire signed [BORDER_COR_WIDTH-2:0]     coord_blank_len_sgn;
wire signed [BORDER_COR_WIDTH-1:0]     coord_blank_temp_sgn; 
wire signed [BORDER_COR_WIDTH-1:0]     coord_border_temp_sgn; 

//--------------------------------------------------------------------------------------coordinate produce (data float)
reg  signed [BORDER_COR_WIDTH-1:0]     add_port_0_sgn;
reg  signed [BORDER_COR_WIDTH-1:0]     add_port_1_sgn;
wire        [BORDER_COR_WIDTH-1:0]     coord_temp;

reg         [BORDER_COR_WIDTH-1:0]     ri_coord_blank_compare     [0:19] ;
reg         [BORDER_COR_WIDTH-1:0]     ri_coord_2nd_compare       [0:19] ;
reg         [BORDER_COR_WIDTH-1:0]     ri_coord_orig_adj          [0:19] ;
reg         [BORDER_COR_WIDTH-1:0]     ri_coord_border            [0:19] ;
reg         [BORDER_COR_WIDTH-1:0]     ri_coord_blank             [0:19] ;

//--------------------------------------------------------------------------------------enable region 
wire        [4:0]                      coord_x_en_nxt; 
reg         [4:0]                      coord_x_en;
wire        [4:0]                      coord_y_en_nxt; 
reg         [4:0]                      coord_y_en; 
wire        [4:0]                      coord_x_pad_en_nxt; 
reg         [4:0]                      coord_x_pad_en; 
wire        [4:0]                      coord_y_pad_en_nxt; 
reg         [4:0]                      coord_y_pad_en; 
wire        [4:0]                      coord_comb_en; 
wire        [4:0]                      coord_pad_comb_en ; 
wire        [4:0]                      coord_total_en;
reg         [4:0]                      coord_x_blank_en; 
wire        [4:0]                      coord_x_blank_en_nxt; 
reg         [4:0]                      coord_y_blank_en; 
wire        [4:0]                      coord_y_blank_en_nxt; 

//--------------------------------------------------------------------------------------color part
wire        [5:0]                      border_width_cal;
wire        [7:0]                      ri_orig_in_data            [0:5] ;
wire signed [7:0]                      ri_trans_data_sgn          [0:5] ;
wire        [7:0]                      ri_shift_data              [0:2] ;
wire        [7:0]                      border_data_cb_nxt;
wire        [7:0]                      border_data_cr_nxt;
wire        [7:0]                      border_data_y_nxt;
reg         [7:0]                      border_data_cb;
reg         [7:0]                      border_data_cr;
reg         [7:0]                      border_data_y;

//-----------------------------------------------------------------------------------------output 

//----------------------------------------------//
// Code Descriptions                            //
//----------------------------------------------//
//---------------------------------------------------------------------counter 
assign hor_cnt_nxt         = (hor_cnt_int ? hor_cnt + 1'b1 : hor_cnt) & {(BORDER_COR_WIDTH){~hor_cnt_clr}};   
assign hor_cnt_int         = i_dvld | (ctrl_cnt != 3'h0);
assign hor_cnt_clr         = i_hend | ctrl_cnt_int;

assign ver_cnt_nxt         = (ver_cnt_int ? ver_cnt + 1'b1 : ver_cnt) & {(BORDER_COR_WIDTH){~ver_cnt_clr}};
assign ver_cnt_int         = i_hend | ((ctrl_cnt != 3'h0) &                        //frist x
                             ((hor_cnt == {{(BORDER_COR_WIDTH-3){1'b0}},3'h4})  |  //first y
                             (hor_cnt == {{(BORDER_COR_WIDTH-4){1'b0}},4'h9})   |  //second x
                             (hor_cnt == {{(BORDER_COR_WIDTH-4){1'b0}},4'he})));   //second y
assign ver_cnt_clr         = i_fend | ctrl_cnt_int;
                                                                 
assign ctrl_cnt_nxt        = (ctrl_cnt_int ? ctrl_cnt + 1'b1 : ctrl_cnt) & {(BORDER_COR_WIDTH){~ctrl_cnt_clr}};                                   
assign ctrl_cnt_int        = i_fstr | (!h_keep & hor_cnt == ({{(BORDER_COR_WIDTH-5){1'b0}},5'h13}));
assign ctrl_cnt_clr        = i_fend | h_keep;
//-----------------------------------// ctrl_cnt mode 
//0:start draw the border 
//1:ri_coord_blank_compare
//2:ri_coord_2nd_compare 
//3:origin_coordinate 
//4:border_coordinate 
//5:blank_coordinate
//-----------------------------------//
//---------------------------------------------------------------------coordinate original 
assign ri_coord_orig [0]   = r_coord_0_1st[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_orig [1]   = r_coord_1_1st[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_orig [2]   = r_coord_2_1st[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_orig [3]   = r_coord_3_1st[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_orig [4]   = r_coord_4_1st[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH]; //-------------------------first x 
assign ri_coord_orig [5]   = r_coord_0_1st[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_orig [6]   = r_coord_1_1st[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_orig [7]   = r_coord_2_1st[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_orig [8]   = r_coord_3_1st[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_orig [9]   = r_coord_4_1st[BORDER_COR_WIDTH - 1 : 0];                                   //-------------------------first y 

assign ri_coord_orig [10]  = r_coord_0_2nd[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_orig [11]  = r_coord_1_2nd[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_orig [12]  = r_coord_2_2nd[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_orig [13]  = r_coord_3_2nd[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH];
assign ri_coord_orig [14]  = r_coord_4_2nd[BORDER_COR_WIDTH + BORDER_COR_WIDTH - 1 : BORDER_COR_WIDTH]; //--------------------------second x 
assign ri_coord_orig [15]  = r_coord_0_2nd[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_orig [16]  = r_coord_1_2nd[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_orig [17]  = r_coord_2_2nd[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_orig [18]  = r_coord_3_2nd[BORDER_COR_WIDTH - 1 : 0];
assign ri_coord_orig [19]  = r_coord_4_2nd[BORDER_COR_WIDTH - 1 : 0];                                   //--------------------------second y 

//-------------------------------------------------------------------------coordinate control 
assign border_width_cal      = (|r_border_width) ? {1'b0,r_border_width} : 6'h01;                       //border width cannot be zero; 
assign h_keep_nxt            = (i_hstr | h_keep) & !i_hend;
assign border_compare        = (ver_cnt[0] == {(BORDER_COR_WIDTH){1'h0}}) ? IMG_HSZ : IMG_VSZ;          //swift coordinate limit between x and y
assign coord_ctrl_0          = (ctrl_cnt != 3'h0) & (border_width_cal < ri_coord_orig[hor_cnt]);        //first point condition 
assign coord_ctrl_1          = (ctrl_cnt != 3'h0) & (ri_coord_2nd_compare[hor_cnt]) >= border_compare;  //second point condition 
assign coord_ctrl            = ver_cnt[1] ? coord_ctrl_1 : coord_ctrl_0;                                //border coordinate  , control bit of positive or negedge (coord_border_temp_sgn)
assign border_width_cal_sgn  = $signed({1'b0,border_width_cal});
assign coord_border_temp_sgn = ($signed({coord_ctrl,1'b1}) * border_width_cal_sgn);
assign coord_blank_ctrl      = ver_cnt[1];                                                           //swift first coordinate or second ,control positive or negedge (coord_blank_temp_sgn)
assign coord_blank_len_sgn   = ({(BORDER_COR_WIDTH-1){(ctrl_cnt != 3'h0)}}) & ($signed({1'b0,ri_coord_blank_compare[hor_cnt]}));  
assign coord_blank_temp_sgn  = ($signed({coord_blank_ctrl,1'b1}) * coord_blank_len_sgn) ;

//-------------------------------------------------------------------------coordinate produce 

always@* begin  //synopsys full_case
  add_port_0_sgn = 0;  //add_port 0 
  case (ctrl_cnt)
    3'h1 : add_port_0_sgn = $signed((ri_coord_orig[hor_cnt]>>> 2)) * $signed({!ver_cnt[1],1'b1});
    3'h2 : add_port_0_sgn = ri_coord_orig[hor_cnt];
    3'h3 : add_port_0_sgn = ri_coord_orig[hor_cnt];
    3'h4 : add_port_0_sgn = ri_coord_orig[hor_cnt];
    3'h5 : add_port_0_sgn = ri_coord_orig_adj[hor_cnt];
  endcase
end 

always@* begin  //synopsys full_case
  add_port_1_sgn = 0;  //add_port 1
  case (ctrl_cnt)
    3'h1 : add_port_1_sgn = (ver_cnt[1]) ? (-(ri_coord_orig[hor_cnt-10]>>>2)) : (ri_coord_orig[hor_cnt+10]>>>2) ; 
    3'h2 : add_port_1_sgn = border_width_cal;
    3'h3 : add_port_1_sgn = coord_border_temp_sgn & {BORDER_COR_WIDTH{(!(coord_ctrl_0) | coord_ctrl_1)}};
    3'h4 : add_port_1_sgn = coord_border_temp_sgn & {BORDER_COR_WIDTH{(coord_ctrl_0  & !(coord_ctrl_1))}};
    3'h5 : add_port_1_sgn = coord_blank_temp_sgn;
  endcase
end 

assign coord_temp         = $unsigned(add_port_0_sgn + add_port_1_sgn);



generate begin 
  for (pad_ix=0 ; pad_ix <= 4 ; pad_ix = pad_ix + 1 ) begin //-------------------------------------------------------------------enable region 

    assign coord_x_en_nxt[pad_ix]         = (((ri_coord_orig_adj [pad_ix] == hor_cnt) & (ctrl_cnt == 3'h0)) | coord_x_en[pad_ix]) & 
                                            !(ri_coord_orig_adj [pad_ix+10] ==(hor_cnt-1));                                             //origin coordinate region (x)
    assign coord_y_en_nxt[pad_ix]         = (((ri_coord_orig_adj [pad_ix+5] == ver_cnt) & (ctrl_cnt == 3'h0)) | coord_y_en[pad_ix]) & 
                                            !(ri_coord_orig_adj [pad_ix+15] ==(ver_cnt-1));                                             //origin coordinate region (y)
    assign coord_x_pad_en_nxt[pad_ix]     = (((ri_coord_border [pad_ix] == hor_cnt) & (ctrl_cnt == 3'h0)) | coord_x_pad_en[pad_ix]) & 
                                            !(ri_coord_border [pad_ix+10] ==(hor_cnt-1));                                               //padding coordinate region (x)
    assign coord_y_pad_en_nxt[pad_ix]     = (((ri_coord_border [pad_ix+5] == ver_cnt) & (ctrl_cnt == 3'h0)) | coord_y_pad_en[pad_ix]) & 
                                            !(ri_coord_border [pad_ix+15] ==(ver_cnt-1));                                               //padding coordinate region (y)

    assign coord_x_blank_en_nxt[pad_ix]   = ((ri_coord_blank[pad_ix] == hor_cnt)   | (coord_x_blank_en[pad_ix])) & !(ri_coord_blank[pad_ix+10] == hor_cnt); 
    assign coord_y_blank_en_nxt[pad_ix]   = ((ri_coord_blank[pad_ix+5] == ver_cnt) | (coord_y_blank_en[pad_ix])) & !(ri_coord_blank[pad_ix+15] == ver_cnt);
    assign coord_comb_en[pad_ix]          = coord_x_en_nxt[pad_ix] & coord_y_en_nxt[pad_ix] &                                   //origin region 
                                            !((coord_x_blank_en_nxt[pad_ix] | coord_y_blank_en_nxt[pad_ix]) & r_border_type);   //blank control 
    assign coord_pad_comb_en[pad_ix]      = (coord_x_pad_en_nxt[pad_ix] & coord_y_pad_en_nxt[pad_ix] &                          //padding region 
                                            !((coord_x_blank_en_nxt[pad_ix] | coord_y_blank_en_nxt[pad_ix]) & r_border_type))   //blank control 
                                            & r_border_en[pad_ix] & h_keep;                                                     //each border have independent enable
    assign coord_total_en[pad_ix]         = (coord_pad_comb_en[pad_ix] & !coord_comb_en[pad_ix]);
    always@(posedge border_clk or negedge border_rst_n) begin 
    if(!border_rst_n) begin 
      coord_x_pad_en[pad_ix]  <= 0;
      coord_y_pad_en[pad_ix]  <= 0;
      coord_x_en[pad_ix]      <= 0; 
      coord_y_en[pad_ix]      <= 0;
      coord_x_blank_en[pad_ix]<= 0;
      coord_y_blank_en[pad_ix]<= 0;
    end
    else begin 
      coord_x_pad_en[pad_ix]  <= coord_x_pad_en_nxt[pad_ix];
      coord_y_pad_en[pad_ix]  <= coord_y_pad_en_nxt[pad_ix];
      coord_x_en[pad_ix]      <= coord_x_en_nxt[pad_ix];
      coord_y_en[pad_ix]      <= coord_y_en_nxt[pad_ix];
      coord_x_blank_en[pad_ix]<= coord_x_blank_en_nxt[pad_ix];
      coord_y_blank_en[pad_ix]<= coord_y_blank_en_nxt[pad_ix];
    end 
    end 

  end
end
endgenerate



//---------------------------------------------------------------------color part
assign ri_orig_in_data[0]             = i_data_y;
assign ri_orig_in_data[1]             = i_data_cb;
assign ri_orig_in_data[2]             = i_data_cr;
assign ri_orig_in_data[3]             = r_border_y;
assign ri_orig_in_data[4]             = r_border_cb;
assign ri_orig_in_data[5]             = r_border_cr;

generate begin //control the transparency of border 
  for (d_ix=0;d_ix<=2;d_ix=d_ix+1) begin 
    assign ri_shift_data[d_ix]        = (ri_orig_in_data[d_ix] >> 2);
    assign ri_trans_data_sgn[d_ix]    = (|coord_total_en)?
                                        ((r_trn_rate == 2'h0) ? 8'h00 :                                                                  //0%
                                        (({BORDER_DATA_WIDTH   {r_trn_rate[0]}} & (ri_orig_in_data[d_ix] >> 1)) +                        //50%
                                        ( {BORDER_DATA_WIDTH   {r_trn_rate[1]}} & ri_shift_data[d_ix]))) :                               //25%
                                        ri_orig_in_data[d_ix];                                                                           //100%

    assign ri_trans_data_sgn[d_ix+3]  = (|coord_total_en)?
                                        ((r_trn_rate == 2'h0) ? ri_orig_in_data[d_ix+3] :                                                //100%
                                        (({BORDER_DATA_WIDTH   {r_trn_rate[1]}}                 & (ri_orig_in_data[d_ix+3] >> 2)) +      //25%
                                        ( {BORDER_DATA_WIDTH   {(r_trn_rate[0]^r_trn_rate[1])}} & (ri_orig_in_data[d_ix+3] >> 1)))):     //50%
                                        8'h00;                                                                                           //0%

  end
end
endgenerate

assign {border_data_cb_nxt,
        border_data_cr_nxt,
        border_data_y_nxt}            = $unsigned({(ri_trans_data_sgn[1]+ri_trans_data_sgn[4]),(ri_trans_data_sgn[2]+ri_trans_data_sgn[5]),(ri_trans_data_sgn[0]+ri_trans_data_sgn[3])});


//---------------------------------------------------------------------output 
assign o_data_y                       = border_data_y;
assign o_data_cb                      = border_data_cb;
assign o_data_cr                      = border_data_cr;

//-------------------------------------------------------------------combination 

always@(posedge border_clk or negedge border_rst_n) begin 
if(!border_rst_n) begin 
//---------------------------------------------------counter 
  hor_cnt                        <= 0;
  ver_cnt                        <= 0;
  ctrl_cnt                       <= 0;
//---------------------------------------------------coordinate produce
  for(i=0 ; i<20 ; i=i+1) begin
    ri_coord_border[i]           <= 0; 
    ri_coord_blank[i]            <= 0; 
    ri_coord_2nd_compare[i]      <= 0;
    ri_coord_orig_adj[i]         <= 0;
    ri_coord_blank_compare[i]    <= 0;
  end
//---------------------------------------------------control 
  h_keep                         <= 0;
end
else begin 
//---------------------------------------------------counter 
  hor_cnt                        <= hor_cnt_nxt;
  ver_cnt                        <= ver_cnt_nxt;
  ctrl_cnt                       <= ctrl_cnt_nxt;
//---------------------------------------------------coordinate produce
  ri_coord_blank_compare[hor_cnt]<= {BORDER_COR_WIDTH{(ctrl_cnt == 3'h1)}} ? coord_temp : ri_coord_blank_compare[hor_cnt];
  ri_coord_2nd_compare[hor_cnt]  <= {BORDER_COR_WIDTH{(ctrl_cnt == 3'h2)}} ? coord_temp : ri_coord_2nd_compare[hor_cnt];
  ri_coord_orig_adj[hor_cnt]     <= {BORDER_COR_WIDTH{(ctrl_cnt == 3'h3)}} ? coord_temp : ri_coord_orig_adj[hor_cnt];
  ri_coord_border[hor_cnt]       <= {BORDER_COR_WIDTH{(ctrl_cnt == 3'h4)}} ? coord_temp : ri_coord_border[hor_cnt];
  ri_coord_blank[hor_cnt]        <= {BORDER_COR_WIDTH{(ctrl_cnt == 3'h5)}} ? coord_temp : ri_coord_blank[hor_cnt];
  h_keep                         <= h_keep_nxt;

//---------------------------------------------------output
  o_hstr                         <= i_hstr;
  o_hend                         <= i_hend;
  o_vstr                         <= i_vstr;
  o_vend                         <= i_vend;
  o_dvld                         <= i_dvld;
  border_data_y                  <= border_data_y_nxt;
  border_data_cb                 <= border_data_cb_nxt;
  border_data_cr                 <= border_data_cr_nxt;
end 
end 



endmodule 
