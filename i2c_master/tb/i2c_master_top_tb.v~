// ------------------------------------------------------------------------------//
// (C) Copyright. 2021
// SILICON OPTRONICS CORPORATION ALL RIGHTS RESERVED
//
// This design is confidential and proprietary owned by Silicon Optronics Corp.
// Any distribution and modification must be authorized by a licensing agreement
// ------------------------------------------------------------------------------//
// Filename        : i2c_master_top_tb.v
// Author          : Willylin
// Version         : $Revision$
// Last Modified On: 2021/10//13
// Last Modified By: $Author$
//
// Description     :test the i2c master 
// ------------------------------------------------------------------------------//

// defination & include
`timescale 1ns/1ns  
`define   TB_TOP            i2c_master_top_tb
`define   MONITOR_TOP       i2c_master_top_mon

 // module start 
module i2c_master_top_tb();

//================================================================================
// simulation config console
//================================================================================

`include "reg_wire_declare.name"

string                ini_file_name   = "reg_config.ini";
string                test_pat_name   = "";

parameter             NUM         = 16;              //number of data need i2c master to read or write  
parameter             TRG_CDC     = "ASYNC";         // "SYNC"/"ASYNC"
parameter             FIFO_DWID   = 24;
parameter             FIFO_DEPTH  = 8;
parameter             DO_FFO_EN   = 0;

//================================================================================
//  signal declaration
//================================================================================
//----------------------------------------------original wire 
wire                 o_sda_en;
wire                 o_scl_en;
wire                 o_finish_tgl_0;
wire                 o_nack_ntfy_tgl_0;
wire                 o_finish_tgl_1;
wire                 o_nack_ntfy_tgl_1;
//-----------------------------------------------control wire 
wire [7:0]           o_addr_sync_0;
wire [7:0]           o_addr_sync_1;
wire [7:0]           o_wr_addr;                  
wire [7:0]           o_wr_data;                  
wire                 o_we;                       
wire [7:0]           o_rd_addr;                 


//------------------------------------------------master reg 
reg                  i2cm_clk;
reg                  i2cm_rst_n;
reg [7:0]            i_i2cm_data;               
reg                  r_i2cm_nack_0;
reg                  r_i2cm_type_0;
reg                  r_i2cm_stb_0;
reg                  r_i2cm_seq_0;
reg                  r_i2cm_trg_0;
reg [NUM_WID-1:0]    r_i2cm_num_0;
reg [7:0]            r_i2cm_dev_id_0;
reg [7:0]            r_i2cm_addr_0;
reg                  r_i2cm_nack_1;
reg                  r_i2cm_type_1;
reg                  r_i2cm_stb_1;
reg                  r_i2cm_seq_1;
reg                  r_i2cm_trg_1;
reg [NUM_WID-1:0]    r_i2cm_num_1;
reg [7:0]            r_i2cm_dev_id_1;
reg [7:0]            r_i2cm_addr_1;

//------------------------------------------------slave reg 
reg                  i_reg_we_s;
reg [7:0]            i_reg_addr_s;
reg [7:0]            i_reg_data_s;
reg                  i2cs_clk;
reg                  i2cs_rst_n;

wire                 io_sda; 
wire                 io_scl;
//-----------------------------------------------config
//reg                 TB_SYS_CLK;

//--------------------------------------------------------------------------------
//  clocking and reset
//--------------------------------------------------------------------------------

always #5  i2cm_clk = ~i2cm_clk;
always #10 i2cs_clk = ~i2cs_clk;

initial  begin 
 i2cm_clk  =0;
 i2cm_rst_n=0;
 i2cs_clk  =0;
 i2cs_rst_n=0;

 #50;
 i2cm_rst_n=1;
 i2cs_rst_n=1;
end

//================================================================================
//  behavior description
//================================================================================


//================================================================================
//  module instantiation
//================================================================================

//-----------------------i2c_master
ip_i2cm_top 
              #(
         .NUM                  (NUM),
         .TRG_CDC              (TRG_CDC),
         .FIFO_DWID            (FIFO_DWID),
         .FIFO_DEPTH           (FIFO_DEPTH),
         .DO_FFO_EN            (DO_FFO_EN)
               )

ip_i2cm_top(
//----------------master clock domain
         .o_rd_addr            (o_rd_addr),
         .o_sda_en             (o_sda_en),
         .o_scl_en             (o_scl_en),
         .o_finish_tgl_0       (o_finish_tgl_0),
         .o_nack_ntfy_tgl_0    (o_nack_ntfy_tgl_0),
         .o_finish_tgl_1       (o_finish_tgl_1),
         .o_nack_ntfy_tgl_1    (o_nack_ntfy_tgl_1),
//----------------register clock domain
         .o_addr_sync_0        (o_addr_sync_0),
         .o_addr_sync_1        (o_addr_sync_1),
         .o_wr_addr            (o_wr_addr),
         .o_wr_data            (o_wr_data),
         .o_we                 (o_we),
//----------------master clock domain
         .i2cm_clk             (i2cm_clk),
         .i2cm_rst_n           (i2cm_rst_n),
         .i_i2cm_data          (i_i2cm_data),               
         .r_i2cm_nack_0        (r_i2cm_nack_0),
         .r_i2cm_type_0        (r_i2cm_type_0),
         .r_i2cm_stb_0         (r_i2cm_stb_0),
         .r_i2cm_seq_0         (r_i2cm_seq_0),
         .r_i2cm_trg_0         (r_i2cm_trg_0),
         .r_i2cm_num_0         (r_i2cm_num_0),
         .r_i2cm_dev_id_0      (r_i2cm_dev_id_0),
         .r_i2cm_addr_0        (r_i2cm_addr_0),
         .r_i2cm_nack_1        (r_i2cm_nack_1),
         .r_i2cm_type_1        (r_i2cm_type_1),
         .r_i2cm_stb_1         (r_i2cm_stb_1),
         .r_i2cm_seq_1         (r_i2cm_seq_1),
         .r_i2cm_trg_1         (r_i2cm_trg_1),
         .r_i2cm_num_1         (r_i2cm_num_1),
         .r_i2cm_dev_id_1      (r_i2cm_dev_id_1),
         .r_i2cm_addr_1        (r_i2cm_addr_1),
         .io_sda               (io_sda), 
         .io_scl               (io_scl),
//----------------register clock domain
         .i2cs_clk             (i2cs_clk),
         .i2cs_rst_n           (i2cs_rst_n),
         .i_reg_we_s           (i_reg_we_s),
         .i_reg_addr_s         (i_reg_addr_s),
         .i_reg_data_s         (i_reg_data_s)
);


//--------------------------------------------------------------------------------
// register setting (override initial value)
//--------------------------------------------------------------------------------
initial begin: REG_INI
  reg_ini.open_ini(ini_file_name);
end
  
//--------------------------------------------------------------------------------
// simulation patten
//--------------------------------------------------------------------------------


//--------------------------------------------------------------------------------
//  waveform dump setting
//--------------------------------------------------------------------------------

initial begin 
      $fsdbDumpfile("./wave/i2c_master_top_tb");
      $fsdbDumpvars(0,i2c_master_top_tb,"+all");
     // $fsdbDumpvars(0,`MONITOR_TOP);

end

//--------------------------------------------------------------------------------
//  register initial procedure
//--------------------------------------------------------------------------------
reg_ini
reg_ini();

//--------------------------------------------------------------------------------

endmodule       
