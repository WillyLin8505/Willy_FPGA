// +FHDR -----------------------------------------------------------------------
// Copyright (c) Silicon Optronics. Inc. 2014
//
// File Name:           i2cm_reg_ctrl.v
// Author:              Willy Lin
// Version:             $Revision$
// Last Modified On:    10/13
// Last Modified By:    $Author$
//
// File Description:    control address and enable . cross clock demain  
//                      
// Clock Domain: input:384k,1536k,2048k,3072k
//               output(SCL):96k,384k,512k,768k
//               output(CLK):384k,1536k,2048k,3072k
// -FHDR -----------------------------------------------------------------------
module i2cm_reg_ctrl

    #(
      parameter     FIFO_DWID   = 16,
      parameter     FIFO_DEPTH  = 5,
      parameter     FIFO_CDC    ="ASYNC",
      parameter     DO_FFO_EN   = 0
     )

(

//----------------------------------------------//
// Output declaration                           //
//----------------------------------------------//
//----------------master and slave clock domain
output     [7:0]           o_ctrl_addr,
output     [7:0]           o_ctrl_data,
output                     o_ctrl_we,

//----------------------------------------------//
// Input declaration                            //
//----------------------------------------------//
//----------------slave clock domain
input                      i2cs_clk,
input                      i2cs_rst_n,
input                      i_i2cs_we,
input      [7:0]           i_i2cs_addr,
input      [7:0]           i_i2cs_data,
//----------------master clock domain
input                      i2cm_clk,
input                      i2cm_rst_n,
input      [7:0]           i_i2cm_data,
input      [7:0]           i_i2cm_addr,
input                      i_i2cm_data_wen,
input                      i_i2cm_trg_flag,
input                      i_dev_id_dir,
input                      i_i2c_data_sel_0_smo,
input                      i_i2c_data_sel_1_smo

);

//----------------------------------------------//
// Register & Wire declaration                  //
//----------------------------------------------//
//---------------------------------------------------FIFO
wire                       fifo_nfull;                              // FIFO near full @wclk doman
wire                       fifo_full;                               // FIFO full @wclk doman
wire                       fifo_nempty;                             // FIFO near empty @rclk doman
wire                       fifo_empty;                              // FIFO empty @rclk doman
wire       [15:0]          fifo_rdata;                              // FIFO read data @rclk doman
wire                       fifo_dvld;                               // fifo read data valid
  
wire       [15:0]          fifo_wdata;                              // FIFO write data @wclk doman
wire                       wflush;                                  // FIFO flush @wclk doman
wire                       fifo_rd;                                 // FIFO read signal @rclk doman
wire                       rflush;                                  // FIFO flush @rclk doman
//---------------------------------------------------other
wire       [7:0]           i2cm_data_sync_nxt;
reg        [7:0]           i2cm_data_sync;
wire       [7:0]           i2cm_addr_sync_nxt;
reg        [7:0]           i2cm_addr_sync;
wire       [7:0]           i2cm_mclk_addr;
//----------------------------------------------//
// Code Descriptions                            //
//----------------------------------------------//

generate
   if (FIFO_CDC == "ASYNC") begin: gen_async_proc

//--------------------------------------------------fifo
     assign fifo_wdata           = {i_i2cm_data,i_i2cm_addr};
     assign wflush               = 1'b0;
     assign rflush               = 1'b0;
     assign fifo_rd              = i_i2c_data_sel_0_smo == 1'b0 & fifo_empty == 1'b0; //can't read data from fifo in WADDR,WADDR_ACK,WR_DATA status
//--------------------------------------------------data
     assign {i2cm_data_sync_nxt,
             i2cm_addr_sync_nxt} = (fifo_dvld) ? fifo_rdata  : {i2cm_data_sync,i2cm_addr_sync};
   end
   else begin

//--------------------------------------------------output
     assign i2cm_data_sync_nxt   = i_i2cm_data;
     assign i2cm_addr_sync_nxt   = i_i2cm_addr;
  end
endgenerate

assign i2cm_mclk_addr            = i_dev_id_dir ? 8'h00 : i_i2cm_addr;

assign o_ctrl_addr               = (fifo_empty & i_i2cm_trg_flag==1'b0) ? i_i2cs_addr :                  //after i2c master send all data 
                                                                                                         //i2c slave can use address
                                   (~i_i2c_data_sel_0_smo | i_i2c_data_sel_1_smo) ? i2cm_addr_sync_nxt : // status in ID,ID_ACK ,
                                                                                                         //read register data from system
                                   i2cm_mclk_addr;                                                       // write data to system register 
assign o_ctrl_data               = i_i2cm_trg_flag ? i2cm_data_sync_nxt : i_i2cs_data;
assign o_ctrl_we                 = fifo_dvld | i_i2cs_we;



always@(posedge i2cs_clk or negedge i2cs_rst_n) begin 
  if(~i2cs_rst_n) begin
    i2cm_data_sync     <= 8'h00;
    i2cm_addr_sync     <= 8'h00;
  end
  else begin
    i2cm_data_sync     <= i2cm_data_sync_nxt;
    i2cm_addr_sync     <= i2cm_addr_sync_nxt;
  end
end

//----------------------------------------------//
// generate block                               //
//----------------------------------------------//
   


generate
   if (FIFO_CDC == "ASYNC") begin

   ip_fifo_top

    #(
        .FIFO_DWID             (FIFO_DWID),
        .FIFO_DEPTH            (FIFO_DEPTH),
        .FIFO_CDC              (FIFO_CDC),
        .DO_FFO_EN             (DO_FFO_EN)
     )

   ip_fifo_top(

         .fifo_nfull           (fifo_nfull),              // FIFO near full @wclk doman
         .fifo_full            (fifo_full),               // FIFO full @wclk doman
         .fifo_nempty          (fifo_nempty),             // FIFO near empty @rclk doman
         .fifo_empty           (fifo_empty),              // FIFO empty @rclk doman
         .fifo_rdata           (fifo_rdata),              // FIFO read data @rclk doman
         .fifo_dvld            (fifo_dvld),               // fifo read data valid

         .fifo_wr              (i_i2cm_data_wen),         // FIFO write signal @wclk doman
         .fifo_wdata           (fifo_wdata),              // FIFO write data @wclk doman
         .wclk                 (i2cm_clk),                // write clock
         .wrst_n               (i2cm_rst_n),              // active low reset @wclk doman
         .wflush               (wflush),                  // wflush
         .fifo_rd              (fifo_rd),                 // FIFO read signal @rclk doman
         .rclk                 (i2cs_clk),                // read clock
         .rrst_n               (i2cs_rst_n),              // active low reset @rclk doman
         .rflush               (rflush)                   // rflush

);
   end

endgenerate

endmodule
