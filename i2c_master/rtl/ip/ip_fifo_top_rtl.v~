// +FHDR -----------------------------------------------------------------------
// Copyright (c) Silicon Optronics. Inc. 2013
//
// File Name:           ip_fifo_top_rtl.v
// Author:              Willylin
// Version:             $Revision$
// Last Modified On:    $Date$
// Last Modified By:    $Author$
//
// File Description:    Async. FIFO
// Abbreviations:
//
// Parameters:          ASYNC_EN = async. FIFO enable
//                      FIFO_DWID = FIFO Data Width
//                      FIFO_DEPTH= FIFO Depth
//                      DO_FFO_EN = F.F. output enable
// Clock Domain:        wclk: write clock domain
//                      rclk: read clock domain
// -FHDR -----------------------------------------------------------------------

module ip_fifo_top

    #(
      parameter            FIFO_DWID   = 1,
      parameter            FIFO_DEPTH  = 5,
      parameter            FIFO_CDC    = "ASYNC",
      parameter            DO_FFO_EN   = 0
     )

(
//----------------------------------------------//
// Output declaration                           //
//----------------------------------------------//

output                     fifo_nfull,              // FIFO near full @wclk doman
output                     fifo_full,               // FIFO full @wclk doman
output                     fifo_nempty,             // FIFO near empty @rclk doman
output                     fifo_empty,              // FIFO empty @rclk doman
output     [FIFO_DWID-1:0] fifo_rdata,              // FIFO read data @rclk doman
output reg                 fifo_dvld,               // fifo read data valid

//----------------------------------------------//
// Input declaration                            //
//----------------------------------------------//

input                      fifo_wr,                 // FIFO write signal @wclk doman
input      [FIFO_DWID-1:0] fifo_wdata,              // FIFO write data @wclk doman
input                      wclk,                    // write clock
input                      wrst_n,                  // active low reset @wclk doman
input                      wflush,                  // wflush
input                      fifo_rd,                 // FIFO read signal @rclk doman
input                      rclk,                    // read clock
input                      rrst_n,                  // active low reset @rclk doman
input                      rflush                   // rflush

);

//----------------------------------------------//
// Local Parameter                              //
//----------------------------------------------//

localparam                 FIFO_AWID = $clog2(FIFO_DEPTH);

//----------------------------------------------//
// Register declaration                         //
//----------------------------------------------//

reg                        fifo_pop_q1;            //

//----------------------------------------------//
// Wire declaration                             //
//----------------------------------------------//

wire      [FIFO_AWID-1:0]  waddr;
wire      [FIFO_AWID-1:0]  raddr;
wire                       fifo_push;              // FIFO push @wclk domain
wire                       fifo_pop;               // FIFO pop  @rclk domain
wire                       fifo_dvld_nxt;
// ---------------- FIFO Signals ---------------//

// FIFO push/pop

assign  fifo_push     = fifo_wr & ~fifo_full;
assign  fifo_dvld_nxt = DO_FFO_EN ? fifo_pop_q1 : fifo_pop;
assign  fifo_pop      = fifo_rd & ~fifo_empty;


// ---------- Sequential Logic -----------------//

always@(posedge rclk or negedge rrst_n) begin
   if(~rrst_n) begin
      fifo_pop_q1   <= 0;
      fifo_dvld     <= 0;
   end
   else begin
      fifo_pop_q1   <= fifo_pop;
      fifo_dvld     <= fifo_dvld_nxt;
   end
end

// ----------- Module Instance -----------------//

ip_fifo_ctrl
            #(  
                .FIFO_DEP   (FIFO_DEPTH),
                .FIFO_CDC   (FIFO_CDC)
             )

ip_fifo_ctrl0(

                //output
                .waddr      (waddr),
                .raddr      (raddr),
                .ff_nfull   (fifo_nfull),
                .ff_full    (fifo_full),
                .ff_nempty  (fifo_nempty),
                .ff_empty   (fifo_empty),

                //input
                .push       (fifo_push),
                .pop        (fifo_pop),
                .wflush     (wflush),
                .rflush     (rflush),
                .wclk       (wclk),
                .rclk       (rclk),
                .wrst_n     (wrst_n),
                .rrst_n     (rrst_n)
);


ip_gmem
            #(
                .MEM_DEP    (FIFO_DEPTH),
                .MEM_DW     (FIFO_DWID),
                .DO_FFO     (DO_FFO_EN)
              )

ip_gmem0(

                //output
                .doa        (),
                .dob        (fifo_rdata),
                .doa_vld    (),
                .dob_vld    (),
                .memo       (),
                //input
                .wea        (fifo_push),
                .ena        (1'b1),
                .enb        (fifo_pop),
                .clr        (),
                .addra      (waddr),
                .addrb      (raddr),
                .dia        (fifo_wdata),
                .mtest      (),
                .clka       (wclk),
                .clkb       (rclk),
                .arst_n     (wrst_n),
                .brst_n     (rrst_n)
);



endmodule
